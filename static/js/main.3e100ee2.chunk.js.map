{"version":3,"sources":["serviceWorker.js","component/NeoButtonPlay.jsx","data/mode.js","pages/Menu.jsx","component/wordContainer.jsx","pages/Game.jsx","pages/initGame.jsx","index.js","Router.jsx"],"names":["Boolean","window","location","hostname","match","style","color","background","boxShadow","width","height","fontFamily","fontWeight","fontSize","display","justifyContent","alignItems","textAlign","borderRadius","linkStyle","textDecoration","NeoButton","text","link","to","class","words","myStyle","backgroundColor","flexDirection","textStyle","margin","Menu","props","useState","bpm","url","setUrl","console","log","TextField","id","label","onChange","e","target","value","split","containerStyle","flexWrap","itemStyle","checked","padding","WordContainer","map","word","setChecked","onClick","Item","renderTime","className","Game","useParams","setDuration","ref","player","controls","playing","isPlaying","durationSeconds","colors","onComplete","InitGame","hasStarted","setHasStarted","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e100ee2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst style = color => ({\n  background: color,\n  boxShadow: \"20px 20px 60px #3d3e3d, -20px -20px 60px #535453\",\n  width: \"150px\",\n  height: \"150px\",\n  fontFamily: \"Barlow\",\n  fontWeight: \"bold\",\n  fontSize: \"0.8m\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  textAlign: \"center\",\n  color: \"white\",\n  borderRadius: \"100%\"\n});\n\nconst linkStyle = { textDecoration: \"none\", color: \"white\" };\n\nconst NeoButton = ({ text, color, link }) => {\n  return (\n    <div style={{ ...style(color) }}>\n      <Link style={{ ...linkStyle }} to={link}>\n        <span class=\"fas fa-play\"></span>\n      </Link>\n    </div>\n  );\n};\n\nexport default NeoButton;\n","export const bpmList = [70, 80, 90];\n\nexport const words = [\n  \"Médecin\",\n  \"Limousine\",\n  \"Bouteille\",\n  \"Requin\",\n  \"Dentifrice\",\n  \"Anecdote\",\n  \"Historique\",\n  \"Superficiel\"\n];\n","import React, { useState } from \"react\";\nimport NeoButtonPlay from \"../component/NeoButtonPlay\";\nimport NeoButton from \"../component/NeoButton\";\nimport { bpmList } from \"../data/mode\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst myStyle = {\n  height: \"100vh\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"#484948\",\n  width: \"100%\",\n  fontFamily: \"Barlow\",\n  fontWeight: \"bold\",\n  fontSize: \"1em\",\n  color: \"white\",\n  flexDirection: \"column\"\n};\n\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"space-evenly\",\n  alignItems: \"center\",\n  width: \"60%\",\n  height: \"200px\"\n};\n\nconst textStyle = {\n  margin: \"40px\",\n  color: \"white\"\n};\n\nexport const Menu = props => {\n  const [bpm, setBpm] = useState(80);\n  const [url, setUrl] = useState(\"\");\n  console.log(\"urlinstate\", url);\n  return (\n    <div style={{ ...myStyle }}>\n      <span>Enter a youtube url:</span>\n      <TextField\n        style={{ ...textStyle }}\n        id=\"standard-basic\"\n        label=\"Standard\"\n        onChange={e => {\n          console.log(e.target.value);\n          setUrl(e.target.value.split(\"=\")[1]);\n        }}\n      />\n      {/* <div style={{ ...containerStyle }}>\n        {bpmList.map(item => {\n          return (\n            <NeoButton\n              selected={item === bpm}\n              onClick={() => setBpm(item)}\n              text={item}\n            ></NeoButton>\n          );\n        })}\n      </div> */}\n\n      <NeoButtonPlay\n        link={\"/game/\" + bpm + \"/\" + url}\n        text=\"go to the game\"\n        color=\"\"\n      ></NeoButtonPlay>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { words } from \"../data/mode\";\n\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"space-evenly\",\n  alignItems: \"center\",\n  flexWrap: \"wrap\",\n  width: \"60%\",\n  margin: \"50px\"\n};\n\nconst itemStyle = checked => {\n  return {\n    boxShadow: \"20px 20px 60px #3d3e3d, -20px -20px 60px #535453\",\n    height: \"100px\",\n    width: \"100px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"black\",\n    fontFamily: \"Barlow\",\n    fontSize: \"2em\",\n    margin: \"20px\",\n    padding: \"30px\",\n    backgroundColor: !checked ? \"white\" : \"#262626\",\n    borderRadius: \"25px\"\n  };\n};\n\nfunction Item(word) {\n  const [checked, setChecked] = useState(false);\n  return (\n    <div onClick={() => setChecked(!checked)} style={{ ...itemStyle(checked) }}>\n      {word}\n    </div>\n  );\n}\n\nexport function WordContainer() {\n  return (\n    <div style={{ ...containerStyle }}>\n      {words.map(word => {\n        return Item(word);\n      })}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { WordContainer } from \"../component/wordContainer\";\nimport ReactPlayer from \"react-player\";\nimport { useRef } from \"react\";\n\nconst myStyle = {\n  height: \"100vh\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"#262626\",\n  width: \"100%\",\n  fontFamily: \"Barlow\",\n  fontWeight: \"bold\",\n  color: \"white\",\n  flexDirection: \"column\"\n};\n\nfunction renderTime(value) {\n  if (value === 0) {\n    return <div className=\"timer\">Let's rap</div>;\n  }\n  console.log(value);\n  return (\n    <div className=\"timer\">\n      <div className=\"text\">Remaining</div>\n      <div className=\"value\">{value}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n}\n\nexport const Game = props => {\n  let { bpm, url } = useParams();\n  const [duration, setDuration] = useState(null);\n  return (\n    <div style={{ ...myStyle }}>\n      <ReactPlayer\n        ref={player => setDuration(player)}\n        controls={false}\n        width={0}\n        height={0}\n        url={\n          url\n            ? \"https://www.youtube.com/watch?v=\" + url\n            : \"https://www.youtube.com/watch?v=KClRc_qd-KI\"\n        }\n        playing\n      />\n      <WordContainer />\n      <CountdownCircleTimer\n        isPlaying\n        durationSeconds={120}\n        colors={[[\"#ffffff\", 0.33], [\"#ffffff\", 0.33], [\"#ffffff\"]]}\n        onComplete={() => {\n          return [false, 0];\n        }}\n        renderTime={renderTime}\n      />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { Game } from \"./Game\";\n\nconst myStyle = {\n  height: \"100vh\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"#262626\",\n  width: \"100%\",\n  fontFamily: \"Barlow\",\n  fontWeight: \"bold\",\n  color: \"white\",\n  flexDirection: \"column\"\n};\n\nfunction renderTime(value) {\n  if (value === 0) {\n    return <div className=\"timer\">Let's rap</div>;\n  }\n  console.log(value);\n  return (\n    <div className=\"timer\">\n      <div className=\"text\">Remaining</div>\n      <div className=\"value\">{value}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n}\nexport function InitGame() {\n  const [hasStarted, setHasStarted] = useState(false);\n  return (\n    <div style={{ ...myStyle }}>\n      {!hasStarted ? (\n        <CountdownCircleTimer\n          isPlaying\n          durationSeconds={3}\n          colors={[[\"#ffffff\", 0.33], [\"#ffffff\", 0.33], [\"#ffffff\"]]}\n          onComplete={() => {\n            setHasStarted(true);\n            return [false, 0];\n          }}\n          renderTime={renderTime}\n        />\n      ) : (\n        <Game></Game>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MyRouter } from \"./Router\";\n\nReactDOM.render(<MyRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Menu } from \"./pages/Menu\";\nimport { Game } from \"./pages/Game\";\nimport { InitGame } from \"./pages/initGame\";\n\nexport const MyRouter = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/game/:bpm/:url\">\n          <InitGame />\n        </Route>\n        <Route path=\"/\">\n          <Menu />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n"],"sourceRoot":""}